import cv2
import matplotlib.pyplot as plt
import numpy as np

"""
cv2 (OpenCV) ‚Üí G√∂r√ºnt√º i≈üleme i√ßin kullaniliyor.
matplotlib.pyplot ‚Üí G√∂r√ºnt√ºleri g√∂stermek i√ßin kullaniliyor.
numpy ‚Üí Matris i≈ülemleri ve kernel olu≈üturma gibi i≈ülemler i√ßin kullaniliyor.
"""

# G√∂r√ºnt√ºy√º oku (Grayscale)
img = cv2.imread(r"C:\Users\MUSA\Desktop\OpenCV\MorfolojikOperasyonlar\data.png", 0)

"""
cv2.imread(path, 0) ‚Üí G√∂r√ºnt√ºy√º gri tonlamali (grayscale) olarak okur.
Eƒüer 0 yerine 1 kullanilsaydi, g√∂r√ºnt√º renkli olarak okunurdu.
"""

# Eƒüer g√∂r√ºnt√º okunamazsa hata mesajƒ± ver
if img is None:
    print("G√∂r√ºnt√º dosyasi bulunamadi, dosya yolunu kontrol edin!")

    """
    Eƒüer g√∂r√ºnt√º y√ºklenemezse (yanli≈ü dosya yolu veya eksik dosya), hata mesaji verilir.

    """
else:
    plt.figure()
    plt.imshow(img, cmap="gray")
    plt.axis("off")
    plt.title("Orijinal Img")

    """
    plt.figure() ‚Üí Yeni bir √ßizim olu≈üturur.
    plt.imshow(img, cmap="gray") ‚Üí G√∂r√ºnt√ºy√º gri tonlamali olarak g√∂sterir.
    plt.axis("off") ‚Üí X ve Y eksenlerini gizler.
    plt.title("Orijinal Img") ‚Üí Ba≈ülik ekler.
    """

    # Erozyon i≈ülemi
    kernel = np.ones((5, 5), dtype=np.uint8)
    result = cv2.erode(img, kernel, iterations=1)
    plt.figure()
    plt.imshow(result, cmap="gray")
    plt.axis("off")
    plt.title("Erozyon")

    """
    Erozyon, g√∂r√ºnt√ºdeki beyaz alanlari k√º√ß√ºlt√ºr (g√ºr√ºlt√ºy√º azaltmak veya ince detaylari kaldirmak i√ßin kullanilir).
    kernel = np.ones((5,5), dtype=np.uint8) ‚Üí 5x5 boyutunda bir beyaz (1) kare matrisi olu≈üturur.
    cv2.erode(img, kernel, iterations=1) ‚Üí Kernel, g√∂r√ºnt√º √ºzerinde dola≈üarak beyaz pikselleri k√º√ß√ºlt√ºr.
    """

    # Geni≈ületme i≈ülemi (Dilation)
    result2 = cv2.dilate(img, kernel, iterations=1)
    plt.figure()
    plt.imshow(result2, cmap="gray")
    plt.axis("off")
    plt.title("Geni≈ületme")

    """
    Geni≈ületme (Dilation), g√∂r√ºnt√ºdeki beyaz alanlari geni≈ületir (bo≈üluklari doldurmak i√ßin kullanilir).
    cv2.dilate(img, kernel, iterations=1) ‚Üí Kernel, g√∂r√ºnt√º √ºzerinde dola≈üarak beyaz pikselleri b√ºy√ºt√ºr.
    """

    # Beyaz g√ºr√ºlt√º (White Noise)
    whiteNoise = (np.random.randint(0, 2, size=img.shape[:2], dtype=np.uint8) * 255)
    plt.figure()
    plt.imshow(whiteNoise, cmap="gray")
    plt.axis("off")
    plt.title("White Noise")

    """
    Beyaz g√ºr√ºlt√º, rastgele 0 ve 255 deƒüerlerinden olu≈üan bir matristir.
    np.random.randint(0, 2, size=img.shape[:2], dtype=np.uint8) ‚Üí 0 veya 1 i√ßeren bir matris olu≈üturur.
    * 255 ‚Üí 1'leri 255 (beyaz) yapar, 0'lari siyah olarak birakir.
    """

    # Beyaz g√ºr√ºlt√º eklenmi≈ü g√∂r√ºnt√º
    noise_img = cv2.add(img, whiteNoise)  # Doƒürudan OpenCV ekleme fonksiyonu kullan
    plt.figure()
    plt.imshow(noise_img, cmap="gray")
    plt.axis("off")
    plt.title("Img With White Noise")

    """
    cv2.add() ‚Üí OpenCV'nin g√ºvenli toplama fonksiyonudur.
    G√ºr√ºlt√º + Orijinal G√∂r√ºnt√º = G√ºr√ºlt√ºl√º G√∂r√ºnt√º
    """

    # A√ßma (Opening)
    opening = cv2.morphologyEx(noise_img, cv2.MORPH_OPEN, kernel)
    plt.figure()
    plt.imshow(opening, cmap="gray")
    plt.axis("off")
    plt.title("A√ßma")

    """
    A√ßma (Opening) i≈ülemi, erozyon + geni≈ületme i≈ülemlerini sirasiyla uygular.
    Beyaz g√ºr√ºlt√ºy√º (white noise) temizlemek i√ßin kullanilir.
    """

    # Siyah g√ºr√ºlt√º (Black Noise)
    blackNoise = (np.random.randint(0, 2, size=img.shape[:2], dtype=np.uint8) * 255)
    blackNoise = blackNoise.astype(np.int16)  # Negatif deƒüerler i√ßin
    black_noise_img = img.astype(np.int16) - blackNoise
    black_noise_img[black_noise_img < 0] = 0  # Negatif deƒüerleri sƒ±fƒ±ra ayarla
    black_noise_img = black_noise_img.astype(np.uint8)  # Geri √ßevir

    """
    Siyah g√ºr√ºlt√º, rastgele 0 ve -255 deƒüerlerinden olu≈üur.
    astype(np.int16) ‚Üí Negatif deƒüerler olu≈üturmak i√ßin veri tipi deƒüi≈ütirilir.
    Orijinal g√∂r√ºnt√º - Siyah g√ºr√ºlt√º ‚Üí Siyah noktalar eklenmi≈ü g√∂r√ºnt√º.
    Negatif deƒüerler sifira ayarlanir (√ß√ºnk√º uint8 veri tipi negatif desteklemez).
    """

    plt.figure()
    plt.imshow(blackNoise, cmap="gray")
    plt.axis("off")
    plt.title("Black Noise")

    plt.figure()
    plt.imshow(black_noise_img, cmap="gray")
    plt.axis("off")
    plt.title("Black Noise Img")

    # Kapatma (Closing)
    closing = cv2.morphologyEx(black_noise_img, cv2.MORPH_CLOSE, kernel)
    """
    Kapatma (Closing) i≈ülemi, geni≈ületme + erozyon i≈ülemlerini sirasiyla uygular.
    Siyah g√ºr√ºlt√ºy√º (black noise) temizlemek i√ßin kullanilir.
    """
    plt.figure()
    plt.imshow(closing, cmap="gray")
    plt.axis("off")
    plt.title("Kapama")

    # Morfolojik Gradyan
    gradient = cv2.morphologyEx(img, cv2.MORPH_GRADIENT, kernel)
    """
    Gradyan, geni≈ületme ve erozyon arasindaki farki hesaplar.
    Kenar belirleme i≈ülemlerinde kullanilir.
    """
    plt.figure()
    plt.imshow(gradient, cmap="gray")
    plt.axis("off")
    plt.title("Gradyan")

    plt.show()
    """
    B√ºt√ºn √ßizimleri ekrana getirir.
    """


    """
    üìå Bu kod OpenCV ile temel morfolojik i≈ülemleri uygular:
    ‚úÖ Erozyon ‚Üí Beyaz pikselleri k√º√ß√ºlt√ºr.
    ‚úÖ Geni≈ületme ‚Üí Beyaz pikselleri b√ºy√ºt√ºr.
    ‚úÖ Beyaz G√ºr√ºlt√º ‚Üí Rastgele beyaz noktalar ekler.
    ‚úÖ A√ßma (Opening) ‚Üí Beyaz g√ºr√ºlt√ºy√º temizler.
    ‚úÖ Siyah G√ºr√ºlt√º ‚Üí Rastgele siyah noktalar ekler.
    ‚úÖ Kapatma (Closing) ‚Üí Siyah g√ºr√ºlt√ºy√º temizler.
    ‚úÖ Gradyan ‚Üí G√∂r√ºnt√ºn√ºn kenarlarini belirler.

    üöÄ Bu i≈ülemler, g√∂r√ºnt√º i≈ülemede g√ºr√ºlt√º temizleme ve kenar belirleme gibi √∂nemli adimlardir.
    """
